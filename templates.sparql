prefix st: <http://ns.inria.fr/sparql-template/>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix jsonld: <http://www.w3.org/ns/json-ld#>
prefix vann: <http://purl.org/vocab/vann/>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix : <http://w3c.github.io/wot-thing-description/#>

template :main(?prefix) {
    st:call-template(:classes, ?ns)
} where {
    ?ns a owl:Ontology ;
        vann:preferredNamespacePrefix ?prefix .
}

template :classes(?ns) {
    "<section>"

        format { "<h3><code>%s</code></h3>" st:call-template(:label, ?class) }
        
        if(?atRisk, "<p><span class=\"at-risk\">This section is at risk.</span></p>", "")

        format { "<p>%s</p>" ?def }

        format { "%s" st:call-template(:fields, ?class) }

        format { "%s" st:call-template(:subclasses, ?class) }

        format { "%s" st:call-template(:notes, ?class) }

    "</section>"
} where {
    ?shape a sh:NodeShape ;
           sh:targetClass ?class ;
           skos:definition ?def .
    filter(strstarts(str(?class), str(?ns)))
    optional { ?shape sh:order ?predefined }
    bind (if(bound(?predefined), ?predefined, "1000"^^xsd:integer) as ?rank)
    optional {
        ?shape skos:editorialNote ?note .
        # FIXME only if note is "at risk"
    }
    bind (bound(?note) as ?atRisk)
} order by ?rank

template :fields(?class) {
    "<table class=\"def\">"
        "<thead>"
            "<tr>"
                "<th><a>Vocabulary term</a></th>"
                "<th>Description</th>"
                "<th>Assignment</th>"
                "<th>Type</th>"
            "</tr>"
        "</thead>"
        format {
            "<tbody>%s%s%s%s%s</tbody>"
            # custom property for Thing (id = @id = IRI)
            if(?class = <https://www.w3.org/2019/wot/td#Thing>,
                concat("<tr class=\"rfc2119-table-assertion\" id=\"td-vocab-at-context--Thing\">",
                       "<td><code>@context</code></td>",
                       "<td>JSON-LD keyword to define short-hand names called terms that are used throughout a TD document.</td>",
                       "<td>mandatory</td>",
                       "<td><a href=\"http://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/#anyURI\"><code>anyURI</code></a> or <a>Array</a></td>",
                       "</tr>",
                       "<tr class=\"rfc2119-table-assertion\" id=\"td-vocab-at-type--Thing\">",
                       "<td><code>@type</code></td>",
                       "<td>JSON-LD keyword to label the object with semantic tags (or types).</td>",
                       "<td>optional</td>",
                       "<td><a href=\"http://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/#string\"><code>string</code></a> or <a>Array</a> of <a href=\"http://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/#string\"><code>string</code></a></td>",
                       "</tr>",
                       "<tr class=\"rfc2119-table-assertion\" id=\"td-vocab-id--Thing\">",
                       "<td><code>id</code></td>",
                       "<td>Identifier of the Thing in form of a URI [[RFC3986]] (e.g., stable URI, temporary and mutable URI, URI with local IP address, URN, etc.).</td>",
                       "<td>optional</td>",
                       "<td><a href=\"http://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/#anyURI\"><code>anyURI</code></a></td>",
                       "</tr>"
                ), "")
            if(?class = <https://www.w3.org/2019/wot/td#InteractionAffordance>,
                concat("<tr class=\"rfc2119-table-assertion\" id=\"td-vocab-at-type--InteractionAffordance\">",
                       "<td><code>@type</code></td>",
                       "<td>JSON-LD keyword to label the object with semantic tags (or types).</td>",
                       "<td>optional</td>",
                       "<td><a href=\"http://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/#string\"><code>string</code></a> or <a>Array</a> of <a href=\"http://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/#string\"><code>string</code></a></td>",
                       "</tr>"
                ), "")
            if(?class = <https://www.w3.org/2019/wot/json-schema#DataSchema>,
                concat("<tr class=\"rfc2119-table-assertion\" id=\"td-vocab-at-type--DataSchema\">",
                       "<td><code>@type</code></td>",
                       "<td>JSON-LD keyword to label the object with semantic tags (or types)</td>",
                       "<td>optional</td>",
                       "<td><a href=\"http://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/#string\"><code>string</code></a> or <a>Array</a> of <a href=\"http://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/#string\"><code>string</code></a></td>",
                       "</tr>"
                ), "")
            if(?class = <https://www.w3.org/2019/wot/security#SecurityScheme>,
                concat("<tr class=\"rfc2119-table-assertion\" id=\"td-vocab-at-type--SecurityScheme\">",
                       "<td><code>@type</code></td>",
                       "<td>JSON-LD keyword to label the object with semantic tags (or types).</td>",
                       "<td>optional</td>",
                       "<td><a href=\"http://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/#string\"><code>string</code></a> or <a>Array</a> of <a href=\"http://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/#string\"><code>string</code></a></td>",
                       "</tr>"
                ), "")
            st:call-template(:field, ?class)
        }
    "</table>"
} where {
    ?shape a sh:NodeShape ;
           sh:targetClass ?class .
    filter exists {
        ?shape sh:property ?propShape .
        ?propShape sh:path ?prop .
    }
}

template :field(?class) {
    format { "<tr class=\"rfc2119-table-assertion\" id=\"td-vocab-%s" st:call-template(:numbered-label, ?prop, ?singleton) }
    format { "--%s\">" st:call-template(:label, ?class) }
        "<td>"
            format { "<code>%s</code>" st:call-template(:numbered-label, ?prop, ?singleton) }
        "</td>"
        "<td>"
            format { "%s" ?def }
            if (?prop = <https://www.w3.org/2019/wot/td#baseUri>,
                  "<br/><br/><code>base</code> does not affect the URIs used in <code>@context</code> and the IRIs used within Linked Data [[?LINKED-DATA]] graphs that are relevant when semantic processing is applied to TD instances.", ""
            )
        "</td>"
        "<td>"
            format {
                "%s"
                if(?hasDefault || ?prop = <https://www.w3.org/2019/wot/hypermedia#forOperationType>,
                   "<a href=\"#sec-default-values\">with default</a>",
                   if(?mandatory, "mandatory", "optional"))
            }
        "</td>"
        "<td>"
            format {
                "%s%s"
                if(?array, "<a>Array</a> of ",
                if(?map, "<a>Map</a> of ",
                if(!?singleton && ?hasType,
                   concat(st:call-template(:type, ?class, ?prop), " or <a>Array</a> of "),
                   "")))
                if(?hasType, st:call-template(:type, ?class, ?prop), "any type")
            }
            format {
                "%s%s%s"
                if(?hasEnum, " (", "")
                st:call-template(:enum, ?class, ?prop, 0)
                if(?hasEnum, ")", "")
            }
        "</td>"
    "</tr>"
} where {
    ?shape a sh:NodeShape ;
        sh:targetClass ?class ;
        sh:property ?propShape .
    ?propShape sh:path ?prop ;
               skos:definition ?def .
    filter (isIRI(?prop))
    optional {
        { ?propShape sh:datatype ?type }
        union
        { ?propShape sh:nodeKind sh:IRI . bind (xsd:anyURI as ?type) }
        union
        { ?propShape sh:node ?valueShape . ?valueShape sh:targetClass ?type }
    }
    bind (bound(?type) as ?hasType)
    optional { ?propShape sh:minCount ?minCount }
    bind (bound(?minCount) as ?mandatory)
    optional { ?propShape sh:maxCount ?maxCount }
    bind (bound(?maxCount) as ?singleton)
    optional {
        ?mSet a jsonld:Mapping ;
        jsonld:iri ?prop ;
        jsonld:container jsonld:set
    }
    bind (bound(?mSet) && !?singleton as ?array)
    optional {
        ?mIndex a jsonld:Mapping ;
        jsonld:iri ?prop .
        { ?mIndex jsonld:container jsonld:index }
        union
        { ?mIndex jsonld:container jsonld:language }
    }
    bind (bound(?mIndex) && !?singleton as ?map)
    optional {
        { ?propShape sh:in ?list }
        union
        { ?propShape skos:example ?list }
    }
    bind (bound(?list) as ?hasEnum)
    optional { ?propShape sh:defaultValue ?default  }
    bind (bound(?default) as ?hasDefault)
    optional { ?propShape sh:order ?predefined }
    bind (if(bound(?predefined), ?predefined, "1000"^^xsd:integer) as ?rank)
} order by ?rank

template :type(?class ?prop) {
    format {
        "<a href=\"%s\"><code>%s</code></a>"
        st:call-template(:href, ?type)
        st:call-template(:label, ?type)
    }
} where {
    ?shape a sh:NodeShape ;
           sh:targetClass ?class ;
           sh:property ?propShape .
    ?propShape sh:path ?prop .
    { ?propShape sh:datatype ?type }
    union
    { ?propShape sh:nodeKind sh:IRI . bind (xsd:anyURI as ?type) }
    union
    { ?propShape sh:node ?valueShape . ?valueShape sh:targetClass ?type }
}

template :enum(?class ?prop ?index) {
    format {
        "%s<code>%s</code>%s"
        if(?first, if(?eg, "e.g., ", "one of "),
        if(?last, "or ", ""))
        ?val
        # FIXME ?val is undefined if literal
        #if(isIRI(?val), st:call-template(:label, ?val), ?val)
        if(?last, "", concat(", ", st:call-template(:enum, ?class, ?prop, ?index + 1)))
    }
} where {
    ?shape a sh:NodeShape ;
           sh:targetClass ?class ;
           sh:property ?propShape .
    ?propShape sh:path ?prop .
    { ?propShape sh:in ?list bind (false as ?eg) }
    union
    { ?propShape skos:example ?list bind (true as ?eg) }
    bind (<javascript:urdf.valueAt>(?list, ?index) as ?val)
    bind ((?index = 0) as ?first)
    bind ((?index + 1 = <javascript:urdf.length>(?list)) as ?last)
}

template :subclasses(?class) {
    "<p>"
        "The class "
        format { "<code>%s</code>" st:call-template(:label, ?class) }
        " has the following subclasses:"
    "</p>"
    "<ul>"
        st:call-template(:subclass, ?class)
    "</ul>"
} where {
    ?subclass rdfs:subClassOf ?class .
}

template :subclass(?class) {
    "<li>"
        format {
            "<a href=\"%s\"><code>%s</code></a>"
            st:call-template(:href, ?subclass)
            st:call-template(:label, ?subclass)
        }
    "</li>"
} where {
    ?subclass rdfs:subClassOf ?class .
    ?subclassShape a sh:NodeShape ;
        sh:targetClass ?subclass .
    ?classShape a sh:NodeShape ;
        sh:targetClass ?class .
    filter (isIRI(?subclass) &&
            isIRI(?class) &&
            # same namespace restriction
            strbefore(str(?class), "#") = strbefore(str(?subclass), "#"))
    optional { ?subclassShape sh:order ?predefined }
    bind (if(bound(?predefined), ?predefined, "1000"^^xsd:integer) as ?rank)
} order by ?rank

template :notes(?class) {
    format { "%s" ?note } ; separator = ""
} where {
    ?shape a sh:NodeShape ;
           sh:targetClass ?class ;
           sh:description ?note .
    filter (datatype(?note) = rdf:HTML)
}

template :href(?term) {
    if(strstarts(str(?term), "http://www.w3.org/2001/XMLSchema#"),
        st:call-template(:href-xsd, ?term),
        st:call-template(:href-fragment, ?term))
} where {}

template :href-xsd(?term) {
    format {
        "http://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/#%s"
        st:call-template(:label, ?term)
    }
} where {}

template :href-fragment(?term) {
    format {
        "#%s"
        lcase(st:call-template(:label, ?term))
    }
} where {}

template :numbered-label(?term ?singular) {
    format { "%s" ?name }
} where {
    optional {
        ?m1 a jsonld:Mapping ;
            jsonld:iri ?term ;
            jsonld:term ?singularName .
        filter not exists {
            ?m1 jsonld:container ?container
        }
    }
    optional {
        ?m2 a jsonld:Mapping ;
            jsonld:iri ?term ;
            jsonld:term ?pluralName ;
            jsonld:container ?container .
    }
    bind (
        if(!bound(?singularName) && !bound(?pluralName), "",
        if(!bound(?singularName), ?pluralName,
        if(!bound(?pluralName), ?singularName,
        if(?singular, ?singularName, ?pluralName))))
        as ?name
    )
}

template :label(?term) {
    format { "%s" ?label }
} where {
    optional {
        ?m a jsonld:Mapping ;
            jsonld:iri ?term ;
            jsonld:term ?name .
    }
    bind (if(bound(?name), ?name, strafter(str(?term), "#")) as ?label)
}

template :desc(?term) {
    format {
        "%s%s"
        if(strends(?desc, "."), ?desc, concat(?desc, "."))
        if(?term = <https://www.w3.org/2019/wot/td#MultiLanguage>, 
            " See <a href=\"#titles-descriptions-serialization-json\"></a> for example usages of this container in a Thing Description instance.",
            "")

    } ; separator = " "
} where {
    ?term rdfs:comment ?desc .
}
