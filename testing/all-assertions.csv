"ID","Status","Comment","Assertion"
"td-processor","null","not testable with Assertion Tester","A TD Processor MUST satisfy the Class instantiation constraints on all Classes defined in , , , and ."
"td-context-ns-thing-mandatory","null","not testable with Assertion Tester","The @context name-value pair MUST contain the anyURI https://www.w3.org/2022/wot/td/v1.1 in order to identify the document as a TD 1.1 which would allow Consumers to use the newly introduced terms."
"td-context-ns-td10-namespace","null","not testable with Assertion Tester","When there are possibly TD 1.0 consumers the anyURI https://www.w3.org/2019/wot/td/v1 MUST be the first entry and the https://www.w3.org/2022/wot/td/v1.1 MUST be the second entry."
"td-context-ns-td10-namespacev10","null","not testable with Assertion Tester","TD 1.1 consumers MUST accept TDs satisfying the W3C WoT Thing Description 1.0 [[wot-thing-description]] specification."
"td-context-ns-thing-optional","null","not testable with Assertion Tester","When @context is an Array, the anyURI https://www.w3.org/2022/wot/td/v1.1 MAY be followed by elements of type anyURI or type Map in any order, while it is RECOMMENDED to include only one Map with all the name-value pairs in the @context Array."
"td-context-ns-thing-map-of-namespaces","null","not testable with Assertion Tester","Maps contained in an @context Array MAY contain name-value pairs, where the value is a namespace identifier of type anyURI and the name a Term or prefix denoting that namespace."
"td-context-default-language","null","not testable with Assertion Tester","One Map contained in an @context Array SHOULD contain a name-value pair that defines the default language for the Thing Description, where the name is the Term @language and the value is a well-formed language tag as defined by [BCP47] (e.g., en, de-AT, gsw-CH, zh-Hans, zh-Hant-HK, sl-nedis)."
"td-processor-bidi-isolation","null","not testable with Assertion Tester","TD Processors SHOULD take care to use bidi isolation when presenting strings to users, particularly when embedding in surrounding text (e.g., for Web user interface)"
"td-producer-mixed-direction","null","not testable with Assertion Tester","TD producers SHOULD attempt to provide mixed direction strings in a way that can be displayed successfully by a naive user agent."
"td-op-for-thing","null","not testable with Assertion Tester","When the forms Array of a Thing instance contains Form instances, it MUST contain op member with the string values assigned to the name op, either directly or within an Array, MUST be one of the following operation types: readallproperties, writeallproperties, readmultipleproperties, writemultipleproperties, observeallproperties, unobserveallproperties, queryallactions, subscribeallevents, or unsubscribeallevents."
"td-op-for-property","null","not testable with Assertion Tester","When a Form instance is within a PropertyAffordance instance, the value assigned to op MUST be one of readproperty, writeproperty, observeproperty, unobserveproperty or an Array containing a combination of these terms."
"td-op-for-action","null","not testable with Assertion Tester","When a Form instance is within an ActionAffordance instance, the value assigned to op MUST either be invokeaction, queryaction, cancelaction or an Array containing a combination of these terms."
"td-op-for-event","null","not testable with Assertion Tester","When a Form instance is within an EventAffordance instance, the value assigned to op MUST be either subscribeevent, unsubscribeevent, or both terms within an Array."
"td-multilanguage-language-tag","null","not testable with Assertion Tester","Each name of the MultiLanguage Map MUST be a language tag as defined in [[!BCP47]]."
"td-multilanguage-value","null","not testable with Assertion Tester","Each value of the MultiLanguage Map MUST be of type string."
"td-format-validation-known-values","null","not testable with Assertion Tester","Servients MAY use the format value to perform additional validation accordingly."
"td-format-validation-other-values","null","not testable with Assertion Tester","When a value that is not found in the known set of values is assigned to format, such a validation SHOULD succeed."
"td-security-scheme-name","null","not testable with Assertion Tester","The value assigned to the name scheme MUST be defined within a Vocabulary included in the Thing Description, either in the standard Vocabulary defined in ยง 5. TD Information Model or in a TD Context Extension."
"td-security-no-secrets","null","not testable with Assertion Tester","For all security schemes, any keys, passwords, or other sensitive information directly providing access MUST NOT be stored in the TD and should instead be shared and stored out-of-band via other mechanisms."
"sec-body-name-json-pointer","null","not testable with Assertion Tester","When used in the context of a body security information location, the value of name MUST be in the form of a JSON pointer [[!RFC6901]] relative to the root of the input DataSchema for each interaction it is used with."
"sec-body-name-json-pointer-creatable","null","not testable with Assertion Tester","When an element of a data schema indicated by a JSON pointer indicated in a body locator does not already exist in the indicated schema, it MUST be possible to insert the indicated element at the location indicated by the pointer."
"sec-body-name-json-pointer-array","null","not testable with Assertion Tester","The JSON pointer used in the body locator MAY use the ""-"" character to indicate a non-existent array element when it is necessary to insert an element after the last element of an existing array."
"sec-body-name-json-pointer-type","null","not testable with Assertion Tester","The element referenced (or created) by a body security information location MUST be required and of type ""string""."
"td-security-in-query-over-uri","null","not testable with Assertion Tester","The value uri SHOULD be specified for the name in in a security scheme only if query is not applicable."
"td-security-in-uri-variable","null","not testable with Assertion Tester","The URIs provided in interactions where a security scheme using uri as the value for in MUST be a URI template including the defined variable."
"sec-security-vocab-auto-in-no-name","null","not testable with Assertion Tester","If a value of auto is set for the in field of a SecurityScheme, then the name field SHOULD NOT be set."
"td-security-uri-variables-distinct","null","not testable with Assertion Tester","The names of URI variables declared in a SecurityScheme MUST be distinct from all other URI variables declared in the TD."
"td-security-combo-exclusive-oneof-or-allof","null","not testable with Assertion Tester","Exactly one of either oneOf or allOf MUST be included."
"td-security-bearer-format-extensions","null","not testable with Assertion Tester","Other formats and algorithms for bearer tokens MAY be specified in vocabulary extensions"
"td-security-oauth2-code-flow","null","not testable with Assertion Tester","For the code flow both authorization and token MUST be included."
"td-security-oauth2-client-flow","null","not testable with Assertion Tester","For the client flow token MUST be included."
"td-security-oauth2-client-flow-no-auth","null","not testable with Assertion Tester","For the client flow authorization MUST NOT be included."
"td-security-oauth2-device-flow","null","not testable with Assertion Tester","For the device flow both authorization and token MUST be included."
"well-known-operation-types-only","null","not testable with Assertion Tester","operations types SHOULD NOT be arbitrarily set by servients and be restricted to the values in the table below."
"td-expectedResponse-default-contentType","null","not testable with Assertion Tester","If no response name-value pair is provided, it MUST be assumed that the content type of the response is equal to the content type assigned to the Form instance."
"td-expectedResponse-contentType","null","not testable with Assertion Tester","If the content type of the expected response differs from the content type of the form, the Form instance MUST include a name-value pair with the name response."
"td-additionalExpectedResponse-contentType","null","not testable with Assertion Tester","If the content type of an additional expected response differs from the content type of the form, the Form instance MUST include an entry in the array associated with the name additionalResponses that includes a value for the name contentType."
"td-additionalExpectedResponse-schema","null","not testable with Assertion Tester","If the data schema of an additional expected response differs from the output data schema of the interaction, the Form instance MUST include an entry in the array associated with the name additionalResponses that includes a value for the name schema."
"td-vocabulary-defaults","null","not testable with Assertion Tester","When assignments in a TD are missing, a TD Processor MUST follow the Default Value assignments expressed in the table of Default Value Definitions."
"td-processor-serialization","null","not testable with Assertion Tester","A TD Processor MUST be able to serialize Thing Descriptions into the JSON format [[!RFC8259]] and/or deserialize Thing Descriptions from that format, according to the rules noted in and ."
"td-json-open","null","not testable with Assertion Tester","TDs MUST be serialized according to the requirements defined in Section 8.1 of RFC8259 [[!RFC8259]] for open ecosystems."
"td-json-open_utf-8","null","not testable with Assertion Tester","TDs MUST be encoded using UTF-8 [[!RFC3629]]."
"td-json-open_no-byte-order","null","not testable with Assertion Tester","Implementations MUST NOT add a byte order mark (U+FEFF) to the beginning of a TD document."
"td-json-open_accept-byte-order","null","not testable with Assertion Tester","TD Processors MAY ignore the presence of a byte order mark rather than treating it as an error."
"td-string-type","null","not testable with Assertion Tester","Values that are of type string or anyURI MUST be serialized as JSON strings."
"td-datetime-type","null","not testable with Assertion Tester","Values that are of type dateTime MUST be serialized as JSON strings following the ""date-time"" format specified by [[RFC3339]]."
"td-datetime-recommended-type","null","not testable with Assertion Tester","Values that are of type dateTime SHOULD use the literal Z representing the UTC time zone instead of an offset."
"td-integer-type","null","not testable with Assertion Tester","Values that are of type integer or unsignedInt MUST be serialized as JSON numbers without a fraction or exponent part."
"td-number-type","null","not testable with Assertion Tester","Values that are of type double MUST be serialized as JSON number."
"td-boolean-type","null","not testable with Assertion Tester","Values that are of type boolean MUST be serialized as JSON boolean."
"td-array-type","null","not testable with Assertion Tester","A value of type Array MUST be serialized as JSON array, with each value of the name-value pairs as element of the JSON array ordered by the numeric name of the pair."
"td-map-type","null","not testable with Assertion Tester","A value of type Map MUST be serialized as JSON object, with each name-value pair as member of the JSON object."
"td-class-type","null","not testable with Assertion Tester","A Class instance MUST be serialized as JSON object, following the detailed rules given individually in ."
"td-context","null","not testable with Assertion Tester","The root element of a TD Serialization MUST be a JSON object that includes a member with the name @context and a value of type string or array that equals or respectively contains https://www.w3.org/2022/wot/td/v1.1."
"td-context-toplevel","null","not testable with Assertion Tester","All name-value pairs of an instance of Thing, where the name is a Vocabulary Term in the Signature of Thing, MUST be serialized as JSON members of the root object."
"td-objects","null","not testable with Assertion Tester","All values assigned to version, securityDefinitions, descriptions, schemaDefinitions, uriVariables, properties, actions, and events in an instance of the Class Thing MUST be serialized as JSON objects."
"td-arrays","null","not testable with Assertion Tester","All values assigned to links, and forms in an instance of the Class Thing MUST be serialized as JSON arrays containing JSON objects as defined in and , respectively."
"td-security-activation","null","not testable with Assertion Tester","The value assigned to security in an instance of Class Thing MUST be serialized as JSON string or as JSON array whose elements are JSON strings."
"td-context-default-language-direction-independence","null","not testable with Assertion Tester","However, when interpreting human-readable text, each human-readable string value MUST be processed independently."
"td-text-at-direction","null","not testable with Assertion Tester","Given that the Thing Description format is based on JSON-LD 1.1 [[?json-ld11]], @direction with the string values ""ltr"", ""rtl"" and null value null MAY be used inside the @context to indicate the default text direction for the human readable strings in the entire TD document."
"td-text-direction-first-strong","null","not testable with Assertion Tester","When metadata such as @direction is not present, TD Consumers SHOULD use [=first-strong detection=] as a fallback."
"td-text-direction-language-tag","null","not testable with Assertion Tester","For the MultiLanguage Map, TD Consumers MAY infer the [=base direction=] from the language tag of the individual strings."
"td-multi-languages","null","not testable with Assertion Tester","All name-value pairs of a MultiLanguage Map MUST be serialized as members of a JSON object, where the name is a valid language tag as defined by [[!BCP47]] (also see W3C I18N Glossary) and the value is a human-readable string in the language indicated by the tag."
"td-multi-languages-consistent","null","not testable with Assertion Tester","All MultiLanguage object within a TD document SHOULD contain the same set of language members."
"td-title-description","null","not testable with Assertion Tester","When title and titles or description and descriptions are present within the same JSON object, the values of title and description MAY be seen as the default text."
"td-titles-descriptions","null","not testable with Assertion Tester","When title and titles or description and descriptions are present in a TD document, each title and description member SHOULD have a corresponding titles and descriptions member, respectively."
"td-ns-multilanguage-content-negotiation","null","not testable with Assertion Tester","In cases where the default language has been negotiated, an @language member MUST be present to indicate the result of the negotiation and the corresponding default language of the returned content."
"td-ns-multilanguage-content-negotiation-no-multi","null","not testable with Assertion Tester","When the default language has been negotiated successfully, TD documents SHOULD include the appropriate matching values for the members title and description in preference to MultiLanguage objects in titles and descriptions members."
"td-ns-multilanguage-content-negotiation-optional","null","not testable with Assertion Tester","Note however that Things MAY choose to not support such dynamically-generated TDs nor to support language negotiation (e.g., because of resource constraints)."
"td-version","null","not testable with Assertion Tester","All name-value pairs of an instance of VersionInfo, where the name is a Vocabulary Term included in the Signature of VersionInfo, MUST be serialized as JSON members with the Vocabulary Term as name."
"td-security","null","not testable with Assertion Tester","All name-value pairs of a Map of SecurityScheme instances MUST be serialized as members of the JSON object that results from serializing the Map; the name of a pair MUST be serialized as a JSON string and the value of the pair, an instance of SecurityScheme, MUST be serialized as a JSON object."
"td-security-schemes","null","not testable with Assertion Tester","All name-value pairs of an instance of one of the Subclasses of SecurityScheme, where the name is a Vocabulary Term included in the Signature of that Subclass or in the Signature of SecurityScheme, MUST be serialized as members of the JSON object that results from serializing the SecurityScheme Subclass's instance, with the Vocabulary Term as name."
"td-security-mandatory","null","not testable with Assertion Tester","At least one security definition MUST be activated through the security member at the Thing level (i.e., in the TD root object)."
"td-security-overrides","null","not testable with Assertion Tester","Security definitions MAY also be activated at the form level by including a security member in form objects, which overrides (i.e., completely replace) all definitions activated at the Thing level."
"td-security-combo-deprecation","null","not testable with Assertion Tester","However, the use of an array with multiple elements to combine security schemes in a security element is now deprecated, instead a ComboSecurityScheme SHOULD be used."
"td-properties","null","not testable with Assertion Tester","All name-value pairs of a Map of PropertyAffordance instances MUST be serialized as members of the JSON object that results from serializing the Map; the name of a pair MUST be serialized as a JSON string and the value of the pair, an instance of PropertyAffordance, MUST be serialized as a JSON object."
"td-property-names","null","not testable with Assertion Tester","All name-value pairs of an instance of PropertyAffordance, where the name is a Vocabulary Term included in (one of) the Signatures of PropertyAffordance, InteractionAffordance, or DataSchema, MUST be serialized as members of the JSON object that results from serializing the PropertyAffordance instance, with the Vocabulary Term as name."
"td-property-arrays","null","not testable with Assertion Tester","The value assigned to forms in an instance of PropertyAffordance MUST be serialized as a JSON array containing one or more JSON object serializations as defined in ."
"td-actions","null","not testable with Assertion Tester","All name-value pairs of a Map of ActionAffordance instances MUST be serialized as members of the JSON object that results from serializing the Map; the name of a pair MUST be serialized as a JSON string and the value of the pair, an instance of ActionAffordance, MUST be serialized as a JSON object."
"td-action-names","null","not testable with Assertion Tester","All name-value pairs of an instance of ActionAffordance, where the name is a Vocabulary Term included in (one of) the Signatures of ActionAffordance or InteractionAffordance, MUST be serialized as members of the JSON object that results from serializing the ActionAffordance instance, with the Vocabulary Term as name."
"td-action-objects","null","not testable with Assertion Tester","The values assigned to input and output in an instance of ActionAffordance MUST be serialized as JSON objects."
"td-action-arrays","null","not testable with Assertion Tester","The value assigned to forms in an instance of ActionAffordance MUST be serialized as a JSON array containing one or more JSON object serializations as defined in ."
"td-events","null","not testable with Assertion Tester","All name-value pairs of a Map of EventAffordance instances MUST be serialized as members of the JSON object that results from serializing the Map; the name of a pair MUST be serialized as a JSON string and the value of the pair, an instance of EventAffordance, MUST be serialized as a JSON object."
"td-event-names","null","not testable with Assertion Tester","All name-value pairs of an instance of EventAffordance, where the name is a Vocabulary Term included in (one of) the Signatures of EventAffordance or InteractionAffordance, MUST be serialized as members of the JSON object that results from serializing the EventAffordance instance, with the Vocabulary Term as name."
"td-event-objects","null","not testable with Assertion Tester","The values assigned to subscription, data, and cancellation in an instance of EventAffordance MUST be serialized as JSON objects."
"td-event-arrays","null","not testable with Assertion Tester","The value assigned to forms in an instance of EventAffordance MUST be serialized as a JSON array containing one or more JSON object serializations as defined in ."
"td-links","null","not testable with Assertion Tester","All name-value pairs of an instance of Link, where the name is a Vocabulary Term included in the Signature of Link, MUST be serialized as members of the JSON object that results from serializing the Link instance, with the Vocabulary Term as name."
"td-forms","null","not testable with Assertion Tester","All name-value pairs of an instance of Form, where the name is a Vocabulary Term included in the Signature of Form, MUST be serialized as members of the JSON object that results from serializing the Form instance, with the Vocabulary Term as name."
"td-form-protocolbindings","null","not testable with Assertion Tester","If required, form objects MAY be supplemented with protocol-specific Vocabulary Terms identified with a prefix."
"td-uriVariables-names","null","not testable with Assertion Tester","In such a case, the URI Template variables MUST be collected in the JSON-object based uriVariables member either in the Thing level or in Interaction Affordance level with the associated (unique) variable names as JSON names."
"td-uriVariables-dataschema","null","not testable with Assertion Tester","The serialization of each value in the map assigned to uriVariables in an instance of Form MUST rely on the Class DataSchema, whose serialization is defined in ."
"td-form-response-object","null","not testable with Assertion Tester","If present, the value assigned to response in an instance of Form MUST be a JSON object."
"td-forms-response","null","not testable with Assertion Tester","If present, the response object MUST contain a contentType member as defined in the Class definition of ExpectedResponse."
"td-data-schema","null","not testable with Assertion Tester","All name-value pairs of an instance of one of the Subclasses of DataSchema, where the name is a Vocabulary Term included in the Signature of that Subclass or in the Signature of DataSchema, MUST be serialized as members of the JSON object that results from serializing the DataSchema Subclass's instance, with the Vocabulary Term as name."
"td-data-schema-objects","null","not testable with Assertion Tester","The value assigned to properties in an instance of ObjectSchema MUST be serialized as a JSON object."
"td-data-schema-arrays","null","not testable with Assertion Tester","The values assigned to enum, required, and oneOf in an instance of DataSchema MUST be serialized as a JSON array."
"td-data-schema-objects-arrays","null","not testable with Assertion Tester","The value assigned to items in an instance of ArraySchema MUST be serialized as a JSON object or a JSON array containing JSON objects."
"td-security-extension","null","not testable with Assertion Tester","Additional security schemes MUST be Subclasses of the Class SecurityScheme."
"td-security-binding","null","not testable with Assertion Tester","If a Thing requires a specific access mechanism for an interaction, that mechanism MUST be specified in the security configuration of the Thing Description."
"td-security-no-extras","null","not testable with Assertion Tester","If a Thing does not require a specific access mechanism for an interaction, that mechanism MUST NOT be specified in the security configuration of the Thing Description."
"client-data-schema","null","not testable with Assertion Tester","A Consumer when interacting with another target Thingdescribed in a WoT Thing Description MUST generate data organized according to the data schemas given in the correspondinginteractions."
"server-data-schema","null","not testable with Assertion Tester","A WoT Thing Description MUST accurately describe the data returned and accepted by each interaction."
"server-data-schema-extras","null","not testable with Assertion Tester","A Thing MAY return additional data from an interactioneven when such data is not described in the data schemas given in its WoT Thing Description."
"client-data-schema-accept-extras","null","not testable with Assertion Tester","A Consumer when interacting with another Thing MUST accept withouterror any additional data not described in the data schemas given in the Thing Description of the target Thing."
"client-data-schema-no-extras","null","not testable with Assertion Tester","A Consumer when interacting with another Thing MUST NOT generate datanot described in the data schemas given in the Thing Description of that Thing."
"client-uri-template","null","not testable with Assertion Tester","A Consumer when interacting with another Thing MUST generate URIsaccording to the URI Templates, base URIs, and form href parametersgiven in the Thing Description of the target Thing."
"server-uri-template","null","not testable with Assertion Tester","URI Templates, base URIs, and href membersin a WoT Thing Description MUST accurately describe the WoT Interface of the Thing."
"bindings-requirements-scheme","null","not testable with Assertion Tester","Every form in a WoT Thing Description MUST follow the requirements of the Protocol Binding indicated by the URI scheme [[!RFC3986]] of its href member."
"bindings-server-accept","null","not testable with Assertion Tester","Every form in a WoT Thing Description MUST accurately describe requests (including request headers, if present) accepted by the Thing in an interaction."
"td-default-http-method","null","not testable with Assertion Tester","When no method is indicated in a form representing an Protocol Binding based on HTTP, a Default Value MUST be assumed as shown in the following table."
"tm-derivation-validity","null","not testable with Assertion Tester","When a Thing Descriptions is instantiated by relying on a Thing Model, it SHOULD be valid according to that Thing Model."
"tm-identification","null","not testable with Assertion Tester","Thing Model definitions MUST use the keyword @type at top level and a value of type string or array that equals or respectively contains tm:ThingModel."
"tm-context-requirement","null","not testable with Assertion Tester","Additionally, in order to identify it as a JSON-LD document, Thing Model definitions MUST use the keyword @context at top level with same rules as a Thing Description."
"tm-protocol-security-restriction","null","not testable with Assertion Tester","A Thing Model MAY NOT contain instance specific Protocol Binding and security information such as endpoint addresses."
"tm-versioning-1","null","not testable with Assertion Tester","When the Thing Model definitions change over time, this SHOULD be reflected in the version container."
"tm-versioning-2","null","not testable with Assertion Tester","Due to the definition of Thing Model the term instance MUST be omitted within the version container."
"tm-extend","null","not testable with Assertion Tester","When a Thing Model extends another Thing Model, at least one links entry with ""rel"": ""tm:extends"" that targets a Thing Model that is be extended MUST be used."
"tm-overwrite-interaction","null","not testable with Assertion Tester","A Thing Model SHOULD NOT overwrite the JSON names defined within the properties, actions, and/or events Map of the extended Thing Model."
"tm-overwrite-types","null","not testable with Assertion Tester","Definitions SHOULD NOT be overwritten in such a way that possible instance values are no longer valid compared to the origin extended definitions."
"tm-tmRef-usecase","null","not testable with Assertion Tester","For importing pieces of definitions of one or more existing Thing Models, the tm:ref term is introduced that provides the location of an existing (sub-)definition that SHOULD be reused."
"tm-tmRef1","null","not testable with Assertion Tester","The tm:ref value MUST follow the pattern"
"tm-tmRef2","null","not testable with Assertion Tester","Every time tm:ref is used, the referenced pre-definition and its dependencies (e.g., by context extension) MUST be assumed at the new defined definition."
"tm-tmRef-overwrite-possibility","null","not testable with Assertion Tester","If the intention is to override an existing JSON name-value pair definition from tm:ref, the same JSON name MUST be used at the same level of the tm:ref declaration that provides a new value."
"tm-tmRef-overwrite-process","null","not testable with Assertion Tester","The process to overwrite MUST follow the JSON Merge Patch algorithm as defined in [RFC7396] where the content of the referenced definition is patched with the new provided JSON name-value pairs."
"tm-tmRef-overwrite-semantic-meaning","null","not testable with Assertion Tester","Similar to tm:extends and to keep the semantic meaning, definitions SHOULD NOT be overwritten in such a way that possible instance values are no longer valid compared to the origin referenced definition."
"tm-ref-recursive-extensions","null","not testable with Assertion Tester","Recursive extensions leading to an infinite loop MUST NOT be defined."
"tm-compose-submodel","null","not testable with Assertion Tester","If it is desired to provide information that a Thing Model consists of one or more (sub-)Thing Models, the links entries MUST use the ""rel"": ""tm:submodel"" that targets to the (sub-) Thing Models."
"tm-compose-instanceName","null","not testable with Assertion Tester","Optionally an instanceName MAY be provided to associate an individual name to the composed (sub-) Thing Model."
"tm-compose-name-collision","null","not testable with Assertion Tester","Thereby the generation process MUST avoid possible name collisions."
"tm-tmOptional","null","not testable with Assertion Tester","If interaction models are not mandatory to be implemented in a Thing Description instance, Thing Model definitions MUST use the JSON member name tm:optional."
"tm-tmOptional-array","null","not testable with Assertion Tester","tm:optional MUST be a JSON array at the top level."
"tm-tmOptional-JSONPointer","null","not testable with Assertion Tester","The value of tm:optional MUST provide JSON Pointer [[RFC6901]] references to the required interaction model definitions."
"tm-tmOptional-resolver","null","not testable with Assertion Tester","The JSON Pointers of tm:optional MUST resolve to an entire interaction affordance Map definition."
"tm-placeholder-usecase","null","not testable with Assertion Tester","In a case where TD instance terms, but not their values, are known in advance, the placeholder labeling MAY be used in a Thing Model."
"tm-placeholder-replacement","null","not testable with Assertion Tester","The placeholder labeling MUST be substituted with a concrete value (e.g., as JSON number, JSON string, JSON object, etc) when TD instance is created from the Thing Model."
"tm-placeholder","null","not testable with Assertion Tester","The string-based pattern of the placeholder MUST follow a valid pattern based on the regular expression {{2}[ -~]+}{2} (e.g., {{PLACEHOLDER_IDENTIFIER}}). The characters between {{ and }} are used as identifier name of the placeholder. The identifier name can be used to identify the placeholder for the substitution process."
"tm-placeholder-value","null","not testable with Assertion Tester","A placeholder MUST be applied within the value of the JSON name-value pair."
"tm-placeholder-retyping","null","not testable with Assertion Tester","If a non string-based value of a JSON name-value pair has a placeholder, the value MUST be (temporarily) typed as string."
"tm-td-generation-inconsistencies","null","not testable with Assertion Tester","A Thing Model MUST be defined in such a way that there are no inconsistencies that would result in a Thing Description not being able to meet the requirements as described in Section and ."
"thing-model-td-generation-processor-imports","null","not testable with Assertion Tester","Copy all definitions from the input Thing Model to the resulting Partial TD instance. If used, the extension and imports feature MUST be resolved and represented in the Partial TD instance according to ."
"thing-model-td-generation-processor-extends","null","not testable with Assertion Tester","If used, links element entry with ""rel"":""tm:extends"" MUST be removed from the current Partial TD"
"thing-model-td-generation-processor-type","null","not testable with Assertion Tester","The tm:ThingModel value of the top-level @type MUST be removed in the Partial TD instance."
"thing-model-td-generation-processor-required","null","not testable with Assertion Tester","All required interactions (not listed in tm:optional) MUST be taken over to the Partial TD instance."
"thing-model-td-generation-processor-optional","null","not testable with Assertion Tester","All optional interactions (listed in tm:optional) MAY be taken over to the Partial TD instance."
"thing-model-td-generation-processor-placeholder","null","not testable with Assertion Tester","If used, all placeholders (see Section ) in the Thing Model MUST be replaced with a valid corresponding value in the Partial TD."
"thing-model-td-generation-processor-forms","null","not testable with Assertion Tester","Missing communication and/or security metadata details MUST be completed in the Thing Description instance based on Section and/or ."
"tm-rel-type-maximum","null","not testable with Assertion Tester","The links array MUST use the entry with ""rel"": ""type"" a maximum of once."
"security-mutual-auth-td","null","not testable with Assertion Tester","Thing Descriptions SHOULD be obtained only through mutually authenticated secure channels."
"security-server-auth-td","null","not testable with Assertion Tester","In cases where the Consumer is associated with a person, e.g. browsers, TDs MAY be obtained through a channel where only the TD provider is authenticated."
"security-context-secure-fetch","null","not testable with Assertion Tester","If it is necessary to fetch a context definition file, an implementation SHOULD first attempt to use HTTP over TLS even when only an HTTP URL is given."
"security-oauth-limits","null","not testable with Assertion Tester","To limit the scope and duration of access to Things, tokens SHOULD be used to manage access."
"sec-vuln-auto","null","not testable with Assertion Tester","The auto security scheme MAY be used if vulnerability scanning is a concern."
"sec-inj-no-intl-markup","null","not testable with Assertion Tester","HTML markup SHOULD NOT be used for internationalization purposes in TD strings."
"security-no-execution","null","not testable with Assertion Tester","A WoT Thing Description JSON-LD serialization MUST NOT be passed through a code execution mechanism such as JavaScript's eval() function to be parsed."
"security-jsonld-expansion","null","not testable with Assertion Tester","Consumers SHOULD set and enforce limits on memory usage to prevent buffer overflow and resource exhaustion during JSON-LD processing."
"security-static-context","null","not testable with Assertion Tester","Constrained implementations SHOULD use vetted versions of their supported context extensions managed statically or as part of a secure update process."
"security-remote-context","null","not testable with Assertion Tester","Constrained implementations SHOULD NOT follow links to remote contexts."
"privacy-mutable-identifiers","null","not testable with Assertion Tester","All identifiers used in a TD SHOULD be mutable, and in particular there SHOULD be a mechanism to update the id of a Thing when necessary."
"privacy-immutable-id-as-property","null","not testable with Assertion Tester","Ideally, any required immutable identifiers SHOULD only be made available via affordances, such as a property, whose value can only be obtained after appropriate authentication and authorization, and managed separately from the TD identifier."
"privacy-auth-users-only","null","not testable with Assertion Tester","Only authorized users SHOULD be provided access to the Thing Description for a Thing."
"privacy-essential-metadata-only","null","not testable with Assertion Tester","Only the amount of information needed for the level of authorization and the use case SHOULD be provided in a TD."
"privacy-id-metadata","null","not testable with Assertion Tester","The value of the id of a TD SHOULD NOT contain metadata describing the Thing or from the TD itself."
"privacy-temp-id-metadata","null","not testable with Assertion Tester","Any temporary ID generated to manage TDs, for example an ID for a database or directory service, SHOULD NOT contain metadata describing the Thing or from the TD itself."
"privacy-distributed-ids","null","not testable with Assertion Tester","TD identifiers SHOULD be generated using a distributed mechanism such as UUIDs that provides a high probability of uniqueness."
"privacy-centralized-ids","null","not testable with Assertion Tester","TD identifiers SHOULD NOT be generated using a centralized authority."
