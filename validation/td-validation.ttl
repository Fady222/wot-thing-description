@prefix : <http://www.w3.org/ns/td-validation#> .
@prefix td: <https://www.w3.org/2019/td#> .
@prefix jsonschema: <https://www.w3.org/2019/json-schema#> .
@prefix wotsec: <https://www.w3.org/2019/wot-security#> .
@prefix lnk: <https://www.w3.org/2019/web-linking#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix vann: <http://purl.org/vocab/vann/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

:ThingShape a sh:NodeShape ;
    sh:targetClass td:Thing ;
    sh:closed "false"^^xsd:boolean ;
    sh:order "1"^^xsd:integer ;
    sh:description
"""
<p>
    <span class=\"rfc2119-assertion\" id=\"td-context-ns-thing-mandatory\">
        The <code>@context</code> name-value pair MUST contain the string <code>https://www.w3.org/2019/td/v1</code>
        either directly when of type <code>string</code> or as first element when of type <a>Array</a>.
    </span>
    <span class=\"rfc2119-assertion\" id=\"td-context-ns-thing-optional\">
        When <code>@context</code> is an Array, the string <code>https://www.w3.org/2019/td/v1</code>
        MAY be followed by elements of type <code>anyUri</code> or type <a>Map</a> in any order,
        while it is RECOMMENDED to include only one <a>Map</a> with all the name-value pairs in the <code>@context</code> <a>Array</a>.
    </span>
    <span class=\"rfc2119-assertion\" id=\"td-context-ns-thing-map-of-namespaces\">
        <a>Maps</a> contained in an <code>@context</code> Array MAY contain name-value pairs,
        where the value is a namespace identifier of type <code>anyUri</code> and the name a <a>Term</a> or prefix denoting that namespace.
    </span>
    <span class=\"rfc2119-assertion\" id=\"td-context-default-language\">
        One <a>Map</a> contained in an <code>@context</code> Array SHOULD contain a name-value pair
        that defines the default language for the Thing Description,
        where the name is the <a>Term</a> <code>@language</code> and the value a well-formed language tag
        as defined by [[!BCP47]], potentially including a script subtag
        (e.g., <code>en</code>, <code>de</code>, <code>ja</code>,
        <code>zh-Hans</code>, <code>zh-Hant</code>, <code>az-Arab</code>).
    </span>
</p>
<p>
    The default language is used to compute the base direction for all
    human-readable text values not otherwise associated with a language tag
    (such as <code>MultiLanguage</code> <a>Maps</a> defined in <a href="#multilanguage"></a>).
</p>
<p>
    The computation of the base direction of all human-readable text strings
    is defined by the following set of rules,
    which is based on the script subtag appraoch described in Section&nbsp;4.5 of [[?string-meta]]:
</p>
<ul>
    <li>
        <span class=\"rfc2119-assertion\" id=\"td-context-default-language-direction-default\">
            If no language tag is given,
            the base direction MUST be assumed to be LTR (left-to-right).
        </span>
        This implies that if the language used in human-readable text uses a script that is written RTL (right-to-left),
        the default language needs to be specified explicitly, so that an appropriate base direction can be inferred.
    </li>
    <li>
        <span class=\"rfc2119-assertion\" id=\"td-context-default-language-direction-script\">
            In cases where a language can be written in more than one script with different base directions,
            the corresponding language tag given in <code>@language</code> or <code>MultiLanguage</code> <a>Maps</a>
            MUST include a script subtag, so that an appropriate base direction can be inferred. 
        </span>
        An example is Azeri, which is written LTR when Latin script is used (specified using <code>az-Latn</code>) 
        and RTL when Arabic script is used (specified using <code>az-Arab</code>).
    </li>
    <li><span class=\"rfc2119-assertion\" id=\"td-context-default-language-direction-inference\">
        Outside of <code>MultiLanguage</code> <a>Maps</a>,
        the base direction MUST be inferred from the language tag of the default language.
    </span></li>
    <li><span class=\"rfc2119-assertion\" id=\"td-context-ns-multilanguage-text-direction-infer\">
        Inside of <code>MultiLanguage</code> <a>Maps</a>,
        the base direction of each value of the name-value pairs 
        MUST be inferred from the language tag given in the corresponding name.
    </span></li>
</ul>
<p>
     Rules inside <code>MultiLanguage</code> instances are similar,
     but use the language tags given inside such instances instead of the default language
     (see <a href="#multilanguage"></a>).
</p>
<p>
     <a>TD Processors</a> should also be aware of certain special cases that can arise
     in processing bidirectional text.  In particular, producers of TDs should avoid numbers with
     embedded spaces in bidirectional text.  Strings starting with embedded text using a script
     with a writing direction opposite to that of the base direction (for example, English words
     embedded in Arabic text) or with multidigit numbers should be avoided if possible.
</p>
<p id="meta-interactions-of-thing">Similar to <a href="#propertyaffordance" class="sec-ref">PropertyAffordance</a>, 
    <a href="#actionaffordance" class="sec-ref">ActionAffordance</a> and 
    <a href="#eventaffordance" class="sec-ref">EventAffordance</a> classes, all of which are 
    subclasses of <a href="#interactionaffordance" class="sec-ref">
    InteractionAffordance</a>, the definition of Thing class also contains 
    the <code>forms</code> term. 
    <span class="rfc2119-assertion" id="td-op-for-thing">
    When a <code>forms</code> term member is present in a Thing instance, 
    the value(s) in the <code>op</code> term member of the <code>forms</code> MUST be one or more of 
    <code>readallproperties</code>, <code>writeallproperties</code>, 
    <code>readmultipleproperties</code> or <code>writemultipleproperties</code>.
    </span>
    (See <a href="#td-forms-readall-example"> an example</a> for an usage of <code>form</code> in a Thing instance.)
</p>
<p>
    For <code>readallproperties</code> operation's output, 
    <code>readmultipleproperties</code> operation's output,
    <code>writeallproperties</code> operation's input and <code>writemultipleproperties</code>
    operation's input, payloads are assigned an object type schema with its 
    properties equal to the Thing's <a href="#propertyaffordance">property affordances</a>.
    For <code>readmultipleproperties</code> operation's input, payloads are
    assigned a string array type schema with its items each equal to one of the names of
    The Thing's <a href="#propertyaffordance">property affordances</a>.
</p>
"""^^rdf:HTML ;
    sh:property [
        sh:path td:title ;
        sh:minCount 1 ;
        sh:datatype xsd:string ;
        sh:order "1"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:titles ;
        sh:class td:MultiLanguage ;
        sh:order "2"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:description ;
        sh:datatype xsd:string ;
        sh:order "3"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:descriptions ;
        sh:class td:MultiLanguage ;
        sh:order "4"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:versionInfo ;
        sh:class td:VersionInfo ;
        sh:order "5"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:created ;
        sh:datatype xsd:dateTime ;
        sh:order "6"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:modified ;
        sh:datatype xsd:dateTime ;
        sh:order "7"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:supportContact ;
        sh:datatype xsd:anyURI ;
        sh:order "8"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:baseUri ;
        sh:datatype xsd:anyURI ;
        sh:order "9"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:hasPropertyAffordance ;
        sh:class td:PropertyAffordance ;
        sh:order "10"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:hasActionAffordance ;
        sh:class td:ActionAffordance ;
        sh:order "11"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:hasEventAffordance ;
        sh:class td:EventAffordance ;
        sh:order "12"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:hasLink ;
        sh:class lnk:Link ;
        sh:order "13"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:hasForm ;
        sh:class lnk:Form ;
        sh:order "14"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:hasSecurityConfiguration ;
        sh:minCount 1 ;
#       sh:class wotsec:SecurityScheme ;
        sh:datatype xsd:string ;
        sh:order "15"^^xsd:integer ;
    ] ;
    sh:property [	
        sh:path td:securityDefinitions ;	
        sh:minCount 1 ;
        sh:class wotsec:SecurityScheme ;	
        sh:order "16"^^xsd:integer ;
    ].
    
:InteractionAffordanceShape a sh:NodeShape ;
    sh:targetClass td:InteractionAffordance ;
    sh:closed "false"^^xsd:boolean ;
    sh:order "2"^^xsd:integer ;
    sh:property [
        sh:path td:title ;
        sh:datatype xsd:string ;
        sh:order "1"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:titles ;
        sh:class td:MultiLanguage ;
        sh:order "2"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:description ;
        sh:datatype xsd:string ;
        sh:order "3"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:descriptions ;
        sh:class td:MultiLanguage ;
        sh:order "4"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:hasForm ;
        sh:minCount 1 ;
        sh:class td:Form ;
        sh:order "5"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:hasUriTemplateVariable ;
        sh:class td:DataSchema ;
        sh:order "6"^^xsd:integer ;
    ] .

:PropertyShape a sh:NodeShape ;
    sh:targetClass td:PropertyAffordance ;
    sh:closed "false"^^xsd:boolean ;
    sh:order "3"^^xsd:integer ;
    sh:description
"""
<p><code>Property</code> class is a subclass of the class <a href="#interactionaffordance" 
    class="sec-ref">InteractionAffordance</a>. 
    <span class="rfc2119-assertion" id="td-op-for-property">
    When a <code>forms</code> term member is present in a Property instance, 
    the value(s) in the <code>op</code> term member of the <code>forms</code> MUST be one or more of 
    <code>readproperty</code>, <code>writeproperty</code>, <code>observeproperty</code> or <code>unobserveproperty</code>.
    </span>
</p>
<p class="note">
    Property instances are also instances of the class
    <a href="#dataschema" class="sec-ref">DataSchema</a>. Therefore,
    it can contain the <code>type</code>, <code>unit</code>,
    <code>readOnly</code> and <code>writeOnly</code> members, among
    others.
</p>
<p>
    <span class="rfc2119-assertion" id="td-op-for-property-readonly">
    When the value of <code>readOnly</code> member is true in an instance of PropertyAffordance, 
    the value(s) in the <code>op</code> term member of the <code>forms</code> 
    MUST NOT contain <code>writeproperty</code>.
    </span>
    Similarly, 
    <span class="rfc2119-assertion" id="td-op-for-property-writeonly">
    when the value of <code>writeOnly</code> member is true in an instance of PropertyAffordance, 
    the value(s) in the <code>op</code> term member of the <code>forms</code> 
    MUST NOT contain <code>readproperty</code>.
    </span>
</p>
"""^^rdf:HTML ;
    sh:property [
        sh:path td:isObservable ;
        sh:datatype xsd:boolean ;
    ] .
    
:ActionShape a sh:NodeShape ;
    sh:targetClass td:ActionAffordance ;
    sh:closed "false"^^xsd:boolean ;
    sh:order "4"^^xsd:integer ;
    sh:description
"""
<p>Action class is a subclass of the class <a href="#interactionaffordance" 
    class="sec-ref">InteractionAffordance</a>.
    <span class="rfc2119-assertion" id="td-op-for-action">
    When a <code>forms</code> term member is present in an Action instance, 
    the value in the <code>op</code> term member of the <code>forms</code> MUST be 
    <code>invokeaction</code>.
    </span>
</p>
"""^^rdf:HTML ;
    sh:property [
        sh:path td:hasInputSchema ;
        sh:class jsonschema:DataSchema ;
        sh:order "1"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:hasOutputSchema ;
        sh:class jsonschema:DataSchema ;
        sh:order "2"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:isSafe ;
        sh:datatype xsd:boolean ;
        sh:minCount 1 ;
        sh:defaultValue "false"^^xsd:boolean ;
        sh:order "3"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:isIdempotent ;
        sh:datatype xsd:boolean ;
        sh:minCount 1 ;
        sh:defaultValue "false"^^xsd:boolean ;
        sh:order "4"^^xsd:integer ;
    ] .
    
:EventShape a sh:NodeShape ;
    sh:targetClass td:EventAffordance ;
    sh:closed "false"^^xsd:boolean ;
    sh:order "5"^^xsd:integer ;
    sh:description
"""
<p>Event class is a subclass of the class <a href="#interactionaffordance" 
    class="sec-ref">InteractionAffordance</a>.
    <span class="rfc2119-assertion" id="td-op-for-event">
    When a <code>forms</code> term member is present in an Event instance, 
    the value(s) in the <code>op</code> term member of the <code>forms</code> MUST be either or both of 
    <code>subscribeevent</code> or/and <code>unsubscribeevent</code>.
    </span>
</p>
"""^^rdf:HTML ;
    sh:property [
        sh:path td:hasSubscriptionSchema ;
        sh:class jsonschema:DataSchema ;
        sh:order "1"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:hasNotificationSchema ;
        sh:class jsonschema:DataSchema ;
        sh:order "2"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:hasCancellationSchema ;
        sh:class jsonschema:DataSchema ;
        sh:order "3"^^xsd:integer ;
    ] .

:FormShape a sh:NodeShape ;
    sh:targetClass lnk:Form ;
    sh:closed "false"^^xsd:boolean ;
    sh:order "6"^^xsd:integer ;
    sh:description
"""
<p>The list of possible operation types of a form is fixed. It only includes the
well-known types necessary to implement the WoT interaction model described in
[[WOT-ARCHITECTURE]]. Future versions of the standard may extend this list but
<span class=\"rfc2119-assertion\" id=\"well-known-operation-types-only\">
operations types SHOULD NOT be arbitrarily set by servients
</span>.
</p>
<p>
In some use cases such as for an <code>ActionAffordance</code> there is a different expectation about the content type for the <code>input</code> 
and <code>output</code>. In such a case, the optional <code>response</code> name-value pair can describe the content type of the expected response.
<span class="rfc2119-assertion" id="td-expectedResponse-contentType">
If the content type of the expected response does not equal its <a>Default Value</a> and differs from the content type of the form,
the <code>Form</code> instance MUST include a name-value pair with the name <code>response</code>.
</span>
</p>

"""^^rdf:HTML ;
    sh:description
"""
<p>Possible values for the <code>contentCoding</code> property can be found e.g. in
the <a href=\"https://www.iana.org/assignments/http-parameters/http-parameters.xhtml#content-coding\">
IANA HTTP content coding registry</a>.
</p>
"""^^rdf:HTML ;
    sh:property [
        sh:path lnk:hasTarget ;
        sh:minCount 1 ;
        sh:datatype xsd:anyURI ;
        sh:order "2"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path lnk:forContentType ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:defaultValue "application/json"^^xsd:string ;
        sh:order "3"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path lnk:forContentCoding ;
        sh:datatype xsd:string ;
        sh:order "4"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path lnk:returns ;
        sh:class lnk:ExpectedResponse ;
        sh:order "8"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path lnk:forOperationType ;
        sh:minCount 1 ;
        sh:datatype xsd:string ;
        sh:in (
            "readproperty"
            "writeproperty"
            "observeproperty"
            "unobserveproperty"
            "invokeaction"
            "subscribeevent"
            "unsubscribeevent"
            "readallproperties"
            "writeallproperties"
            "readmultipleproperties"
            "writemultipleproperties"
        );
        sh:order "1"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path lnk:forSubProtocol ;
        sh:datatype xsd:string ;
        sh:in (
            "longpoll"
            "websub"
            "sse"
        );
        sh:order "5"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:hasSecurityConfiguration ;
#       sh:class wotsec:SecurityScheme ;
        sh:datatype xsd:string ;
        sh:order "6"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path wotsec:scopes ;
        sh:datatype xsd:string ;
        sh:order "7"^^xsd:integer ;
    ] .
    
:LinkShape a sh:NodeShape ;
    sh:targetClass lnk:Link ;
    sh:closed "false"^^xsd:boolean ;
    sh:order "7"^^xsd:integer ;
    sh:property [
        sh:path lnk:hasTarget ;
        sh:minCount 1 ;
        sh:datatype xsd:anyURI ;
        sh:order "1"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path lnk:hintsAtMediaType ;
        sh:datatype xsd:string ;
        sh:order "2"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path lnk:hasRelationType ;
        sh:datatype xsd:string ;
        sh:order "3"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path lnk:hasAnchor ;
        sh:datatype xsd:anyURI ;
        sh:order "4"^^xsd:integer ;
    ] .

:VersionInfoShape a sh:NodeShape ;
    sh:targetClass td:VersionInfo ;
    sh:closed "false"^^xsd:boolean ;
    sh:order "8"^^xsd:integer ;
    sh:property [
        sh:path td:instance ;
        sh:minCount 1 ;
        sh:datatype xsd:string ;
    ] .

:ExpectedResponseShape a sh:NodeShape ;
    sh:targetClass lnk:ExpectedResponse ;
    sh:closed "false"^^xsd:boolean ;
    sh:order "9"^^xsd:integer ;
     sh:property [
        sh:path lnk:forContentType ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:defaultValue "application/json"^^xsd:string ;
    ] .


:MultiLanguageShape a sh:NodeShape ;
    sh:targetClass td:MultiLanguage ;
    sh:closed "false"^^xsd:boolean ;
    sh:order "10"^^xsd:integer ;
    sh:description
"""
<p>
<span class=\"rfc2119-assertion\" id=\"td-multilanguage-language-tag\"> 
    Each name of the <code>MultiLanguage</code> <a>Map</a>
    MUST be a language tag as defined in [[!BCP47]],
    potentially including a script subtag.
</span>
<span class=\"rfc2119-assertion\" id=\"td-multilanguage-value\"> 
    Each value of the <code>MultiLanguage</code> <a>Map</a>
    MUST be of type <code>string</code>.
</span>
</p>
"""^^rdf:HTML ;
    sh:property [
 
    ] .

:SecuritySchemeShape a sh:NodeShape ;
    sh:targetClass wotsec:SecurityScheme ;
    sh:closed "false"^^xsd:boolean ;
    sh:order "1"^^xsd:integer ;
    sh:description 
"""
"""^^rdf:HTML ;
    sh:property [
        sh:path wotsec:scheme ;
        sh:minCount 1 ;
        sh:datatype xsd:string ;
        sh:in (
            "nosec" 
            "basic" 
            "cert" 
            "digest" 
            "bearer" 
            "pop" 
            "psk" 
            "public" 
            "oauth2" 
            "apikey"
        );
        sh:order "1"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:description ;
        sh:datatype xsd:string ;
        sh:order "2"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:descriptions ;
        sh:class td:MultiLanguage ;
        sh:order "3"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path wotsec:proxy ;
        sh:datatype xsd:anyURI ;
        sh:order "4"^^xsd:integer ;
    ] .

:NoSecuritySchemeShape a sh:NodeShape ;
    sh:targetClass wotsec:NoSecurityScheme ;
    sh:order "2"^^xsd:integer .

:BasicSecuritySchemeShape a sh:NodeShape ;
    sh:targetClass wotsec:BasicSecurityScheme ;
    sh:order "3"^^xsd:integer ;
    sh:property [
        sh:path wotsec:in ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:defaultValue "header"^^xsd:string ;
        sh:order "1"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path wotsec:name ;
        sh:datatype xsd:string ;
        sh:order "2"^^xsd:integer ;
    ] .

:DigestSecuritySchemeShape a sh:NodeShape ;
    sh:targetClass wotsec:DigestSecurityScheme ;
    sh:order "4"^^xsd:integer ;
    sh:property [
        sh:path wotsec:qop ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:defaultValue "auth"^^xsd:string ;
        sh:order "1"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path wotsec:in ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:defaultValue "header"^^xsd:string ;
        sh:order "2"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path wotsec:name ;
        sh:datatype xsd:string ;
        sh:order "3"^^xsd:integer ;
    ] .

:APIKeySecuritySchemeShape a sh:NodeShape ;
    sh:targetClass wotsec:APIKeySecurityScheme ;
    sh:order "5"^^xsd:integer ;
    sh:property [
        sh:path wotsec:in ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:defaultValue "query"^^xsd:string ;
        sh:order "1"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path wotsec:name ;
        sh:datatype xsd:string ;
        sh:order "2"^^xsd:integer ;
    ] .

:BearerSecuritySchemeShape a sh:NodeShape ;
    sh:targetClass wotsec:BearerSecurityScheme ;
    sh:order "6"^^xsd:integer ;
    sh:property [
        sh:path wotsec:authorization ;
        sh:datatype xsd:anyURI ;
        sh:order "1"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path wotsec:alg ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:defaultValue "ES256"^^xsd:string ;
        sh:order "2"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path wotsec:format ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:defaultValue "jwt"^^xsd:string ;
        sh:order "3"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path wotsec:in ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:defaultValue "header"^^xsd:string ;
        sh:order "4"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path wotsec:name ;
        sh:datatype xsd:string ;
        sh:order "5"^^xsd:integer ;
    ] .

:CertSecuritySchemeShape a sh:NodeShape ;
    sh:targetClass wotsec:CertSecurityScheme ;
    sh:order "7"^^xsd:integer ;
    sh:property [
        sh:path wotsec:identity ;
        sh:datatype xsd:string ;
    ] .

:PSKSecuritySchemeShape a sh:NodeShape ;
    sh:targetClass wotsec:PSKSecurityScheme ;
    sh:order "8"^^xsd:integer ;
    sh:property [
        sh:path wotsec:identity ;
        sh:datatype xsd:string ;
    ] .

:PublicSecuritySchemeShape a sh:NodeShape ;
    sh:targetClass wotsec:PublicSecurityScheme ;
    sh:order "9"^^xsd:integer ;
    sh:property [
        sh:path wotsec:identity ;
        sh:datatype xsd:string ;
    ] .

:PoPSecuritySchemeShape a sh:NodeShape ;
    sh:targetClass wotsec:PoPSecurityScheme ;
    sh:order "10"^^xsd:integer ;
    sh:property [
        sh:path wotsec:authorization ;
        sh:datatype xsd:anyURI ;
        sh:order "1"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path wotsec:alg ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:defaultValue "ES256"^^xsd:string ;
        sh:order "2"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path wotsec:format ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:defaultValue "jwt"^^xsd:string ;
        sh:order "3"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path wotsec:in ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:defaultValue "header"^^xsd:string ;
        sh:order "4"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path wotsec:name ;
        sh:datatype xsd:string ;
        sh:order "5"^^xsd:integer ;
    ] .

:OAuth2SecuritySchemeShape a sh:NodeShape ;
    sh:targetClass wotsec:OAuth2SecurityScheme ;
    sh:order "11"^^xsd:integer ;
    sh:property [
        sh:path wotsec:authorization ;
        sh:datatype xsd:anyURI ;
        sh:order "1"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path wotsec:token ;
        sh:datatype xsd:anyURI ;
        sh:order "2"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path wotsec:refresh ;
        sh:datatype xsd:anyURI ;
        sh:order "3"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path wotsec:scopes ;
        sh:datatype xsd:string ;
        sh:order "4"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path wotsec:flow ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:defaultValue "implicit"^^xsd:string ;
        sh:order "5"^^xsd:integer ;
    ] .
    
:DataSchemaShape a sh:NodeShape ;
    sh:targetClass jsonschema:DataSchema ;
    sh:closed "false"^^xsd:boolean ;
    sh:order "1"^^xsd:integer ;
    sh:description
"""
<p>The <code>format</code> string values are known from a fixed set of values and their corresponding format rules 
defined in [[?JSON-SCHEMA-VALIDATION]] (Section 7.3 Defined Formats in particluar). 
<span class="rfc2119-assertion" id="td-format-validation-known-values">
Servients MAY use the <code>format</code> value to perform additional validation accordingly. 
</span>
<span class="rfc2119-assertion" id="td-format-validation-other-values">
When a value that is not found in the known set of values is assigned to <code>format</code>, 
such a validation SHOULD succeed.
</span>
</p>
"""^^rdf:HTML ;
    sh:property [
        sh:path td:title ;
        sh:datatype xsd:string ;
        sh:order "1"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:titles ;
        sh:class td:MultiLanguage ;
        sh:order "2"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:description ;
        sh:datatype xsd:string ;
        sh:order "3"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:descriptions ;
        sh:class td:MultiLanguage ;
        sh:order "4"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path jsonschema:type ;
        sh:datatype xsd:string ;
        sh:in (
            "object"
            "array"
            "string"
            "number"
            "integer"
            "boolean"
            "null"
        );
        sh:order "5"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path jsonschema:const ;
        sh:order "6"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path td:unit ;
        sh:class xsd:string;
        sh:order "7"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path jsonschema:oneOf ;
        sh:class jsonschema:DataSchema;
        sh:order "8"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path jsonschema:enum ;
        sh:order "9"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path jsonschema:readOnly ;
        sh:datatype xsd:boolean ;
        sh:defaultValue "false"^^xsd:boolean ;
        sh:order "10"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path jsonschema:writeOnly ;
        sh:datatype xsd:boolean ;
        sh:defaultValue "false"^^xsd:boolean ;
        sh:order "11"^^xsd:integer ;
    ] ;
        sh:property [
        sh:path jsonschema:format ;
        sh:datatype xsd:string ;
        sh:order "12"^^xsd:integer ;
    ] .

:ArraySchemaShape a sh:NodeShape ;
    sh:targetClass jsonschema:ArraySchema ;
    sh:closed "false"^^xsd:boolean ;
    sh:order "2"^^xsd:integer ;
    sh:property [
        sh:path jsonschema:items ;
        sh:class jsonschema:DataSchema ;
        sh:order "1"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path jsonschema:minItems ;
        sh:datatype xsd:unsignedInt ;
        sh:order "2"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path jsonschema:maxItems ;
        sh:datatype xsd:unsignedInt ;
        sh:order "3"^^xsd:integer ;
    ] .
    
:BooleanSchemaShape a sh:NodeShape ;
    sh:targetClass jsonschema:BooleanSchema ;
    sh:closed "false"^^xsd:boolean ;
    sh:order "3"^^xsd:integer .
    
:NumberSchemaShape a sh:NodeShape ;
    sh:targetClass jsonschema:NumberSchema ;
    sh:closed "false"^^xsd:boolean ;
    sh:order "4"^^xsd:integer ;
    sh:property [
        sh:path jsonschema:minimum ;
        sh:datatype xsd:double ;
        sh:order "1"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path jsonschema:maximum ;
        sh:datatype xsd:double ;
        sh:order "2"^^xsd:integer ;
    ] .
    
:IntegerSchemaShape a sh:NodeShape ;
    sh:targetClass jsonschema:IntegerSchema ;
    sh:closed "false"^^xsd:boolean ;
    sh:order "5"^^xsd:integer ;
    sh:property [
        sh:path jsonschema:minimum ;
        sh:datatype xsd:integer ;
        sh:order "1"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path jsonschema:maximum ;
        sh:datatype xsd:integer ;
        sh:order "2"^^xsd:integer ;
    ] .
    
:ObjectSchemaShape a sh:NodeShape ;
    sh:targetClass jsonschema:ObjectSchema ;
    sh:closed "false"^^xsd:boolean ;
    sh:order "6"^^xsd:integer ;
    sh:property [
        sh:path jsonschema:properties ;
        sh:class jsonschema:DataSchema ;
        sh:order "1"^^xsd:integer ;
    ] ;
    sh:property [
        sh:path jsonschema:required ;
        sh:datatype xsd:string ;
        sh:order "2"^^xsd:integer ;
    ] .

:StringSchemaShape a sh:NodeShape ;
    sh:targetClass jsonschema:StringSchema ;
    sh:closed "false"^^xsd:boolean ;
    sh:order "7"^^xsd:integer .

:NullSchemaShape a sh:NodeShape ;
    sh:targetClass jsonschema:NullSchema ;
    sh:closed "false"^^xsd:boolean ;
    sh:order "8"^^xsd:integer .
